// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static partial class MVC
{
    public static MCQ.Controllers.HomeController Home = new MCQ.Controllers.T4MVC_HomeController();
    public static MCQ.Controllers.QuizController Quiz = new MCQ.Controllers.T4MVC_QuizController();
    public static T4MVC.AccountController Account = new T4MVC.AccountController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC
{
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class app {
            private const string URLPATH = "~/Scripts/app";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string accountService_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/accountService.min.js") ? Url("accountService.min.js") : Url("accountService.js");
            public static readonly string accountSettingsController_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/accountSettingsController.min.js") ? Url("accountSettingsController.min.js") : Url("accountSettingsController.js");
            public static readonly string app_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/app.min.js") ? Url("app.min.js") : Url("app.js");
            public static readonly string dashboardController_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dashboardController.min.js") ? Url("dashboardController.min.js") : Url("dashboardController.js");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class helpers {
                private const string URLPATH = "~/Scripts/app/helpers";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string httpHelpers_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/httpHelpers.min.js") ? Url("httpHelpers.min.js") : Url("httpHelpers.js");
                public static readonly string httpInterceptor_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/httpInterceptor.min.js") ? Url("httpInterceptor.min.js") : Url("httpInterceptor.js");
            }
        
            public static readonly string homeController_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/homeController.min.js") ? Url("homeController.min.js") : Url("homeController.js");
            public static readonly string interfaces_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/interfaces.min.js") ? Url("interfaces.min.js") : Url("interfaces.js");
            public static readonly string loginController_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/loginController.min.js") ? Url("loginController.min.js") : Url("loginController.js");
            public static readonly string navLoginController_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/navLoginController.min.js") ? Url("navLoginController.min.js") : Url("navLoginController.js");
            public static readonly string paymentController_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/paymentController.min.js") ? Url("paymentController.min.js") : Url("paymentController.js");
            public static readonly string paymentService_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/paymentService.min.js") ? Url("paymentService.min.js") : Url("paymentService.js");
            public static readonly string questionController_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/questionController.min.js") ? Url("questionController.min.js") : Url("questionController.js");
            public static readonly string quizController_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/quizController.min.js") ? Url("quizController.min.js") : Url("quizController.js");
            public static readonly string quizService_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/quizService.min.js") ? Url("quizService.min.js") : Url("quizService.js");
            public static readonly string registerController_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/registerController.min.js") ? Url("registerController.min.js") : Url("registerController.js");
            public static readonly string resetPasswordController_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/resetPasswordController.min.js") ? Url("resetPasswordController.min.js") : Url("resetPasswordController.js");
            public static readonly string topicService_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/topicService.min.js") ? Url("topicService.min.js") : Url("topicService.js");
            public static readonly string topicsMenuControllers_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/topicsMenuControllers.min.js") ? Url("topicsMenuControllers.min.js") : Url("topicsMenuControllers.js");
            public static readonly string topicSummaryController_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/topicSummaryController.min.js") ? Url("topicSummaryController.min.js") : Url("topicSummaryController.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class lib {
            private const string URLPATH = "~/Scripts/lib";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class angularjs {
                private const string URLPATH = "~/Scripts/lib/angularjs";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string angular_facebook_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular-facebook.min.js") ? Url("angular-facebook.min.js") : Url("angular-facebook.js");
                public static readonly string angular_ui_router_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular-ui-router.d.min.js") ? Url("angular-ui-router.d.min.js") : Url("angular-ui-router.d.js");
                public static readonly string angular_ui_router_min_js = Url("angular-ui-router.min.js");
                public static readonly string angular_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular.d.min.js") ? Url("angular.d.min.js") : Url("angular.d.js");
                public static readonly string angular_min_js = Url("angular.min.js");
                public static readonly string angular_min_js_map = Url("angular.min.js.map");
                public static readonly string angularlike_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angularlike.min.js") ? Url("angularlike.min.js") : Url("angularlike.js");
                public static readonly string slider_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/slider.min.js") ? Url("slider.min.js") : Url("slider.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class bootstrap {
                private const string URLPATH = "~/Scripts/lib/bootstrap";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class css {
                    private const string URLPATH = "~/Scripts/lib/bootstrap/css";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string bootstrap_theme_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-theme.min.css") ? Url("bootstrap-theme.min.css") : Url("bootstrap-theme.css");
                    public static readonly string bootstrap_theme_css_map = Url("bootstrap-theme.css.map");
                    public static readonly string bootstrap_theme_min_css = Url("bootstrap-theme.min.css");
                    public static readonly string bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.css") ? Url("bootstrap.min.css") : Url("bootstrap.css");
                    public static readonly string bootstrap_css_map = Url("bootstrap.css.map");
                    public static readonly string bootstrap_min_css = Url("bootstrap.min.css");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class fonts {
                    private const string URLPATH = "~/Scripts/lib/bootstrap/fonts";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string glyphicons_halflings_regular_eot = Url("glyphicons-halflings-regular.eot");
                    public static readonly string glyphicons_halflings_regular_svg = Url("glyphicons-halflings-regular.svg");
                    public static readonly string glyphicons_halflings_regular_ttf = Url("glyphicons-halflings-regular.ttf");
                    public static readonly string glyphicons_halflings_regular_woff = Url("glyphicons-halflings-regular.woff");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class js {
                    private const string URLPATH = "~/Scripts/lib/bootstrap/js";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.js") ? Url("bootstrap.min.js") : Url("bootstrap.js");
                    public static readonly string bootstrap_min_js = Url("bootstrap.min.js");
                    public static readonly string respond_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/respond.min.js") ? Url("respond.min.js") : Url("respond.js");
                    public static readonly string respond_min_js = Url("respond.min.js");
                    public static readonly string ui_bootstrap_min_js = Url("ui-bootstrap.min.js");
                }
            
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class font_awesome {
                private const string URLPATH = "~/Scripts/lib/font-awesome";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class css {
                    private const string URLPATH = "~/Scripts/lib/font-awesome/css";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string font_awesome_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/font-awesome.min.css") ? Url("font-awesome.min.css") : Url("font-awesome.css");
                    public static readonly string font_awesome_min_css = Url("font-awesome.min.css");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class fonts {
                    private const string URLPATH = "~/Scripts/lib/font-awesome/fonts";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string fontawesome_webfont_eot = Url("fontawesome-webfont.eot");
                    public static readonly string fontawesome_webfont_svg = Url("fontawesome-webfont.svg");
                    public static readonly string fontawesome_webfont_ttf = Url("fontawesome-webfont.ttf");
                    public static readonly string fontawesome_webfont_woff = Url("fontawesome-webfont.woff");
                    public static readonly string fontawesome_webfont_woff2 = Url("fontawesome-webfont.woff2");
                    public static readonly string FontAwesome_otf = Url("FontAwesome.otf");
                }
            
                public static readonly string HELP_US_OUT_txt = Url("HELP-US-OUT.txt");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class less {
                    private const string URLPATH = "~/Scripts/lib/font-awesome/less";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string animated_less = Url("animated.less");
                    public static readonly string bordered_pulled_less = Url("bordered-pulled.less");
                    public static readonly string core_less = Url("core.less");
                    public static readonly string fixed_width_less = Url("fixed-width.less");
                    public static readonly string font_awesome_less = Url("font-awesome.less");
                    public static readonly string icons_less = Url("icons.less");
                    public static readonly string larger_less = Url("larger.less");
                    public static readonly string list_less = Url("list.less");
                    public static readonly string mixins_less = Url("mixins.less");
                    public static readonly string path_less = Url("path.less");
                    public static readonly string rotated_flipped_less = Url("rotated-flipped.less");
                    public static readonly string stacked_less = Url("stacked.less");
                    public static readonly string variables_less = Url("variables.less");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class scss {
                    private const string URLPATH = "~/Scripts/lib/font-awesome/scss";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string _animated_scss = Url("_animated.scss");
                    public static readonly string _bordered_pulled_scss = Url("_bordered-pulled.scss");
                    public static readonly string _core_scss = Url("_core.scss");
                    public static readonly string _fixed_width_scss = Url("_fixed-width.scss");
                    public static readonly string _icons_scss = Url("_icons.scss");
                    public static readonly string _larger_scss = Url("_larger.scss");
                    public static readonly string _list_scss = Url("_list.scss");
                    public static readonly string _mixins_scss = Url("_mixins.scss");
                    public static readonly string _path_scss = Url("_path.scss");
                    public static readonly string _rotated_flipped_scss = Url("_rotated-flipped.scss");
                    public static readonly string _stacked_scss = Url("_stacked.scss");
                    public static readonly string _variables_scss = Url("_variables.scss");
                    public static readonly string font_awesome_scss = Url("font-awesome.scss");
                }
            
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class jquery {
                private const string URLPATH = "~/Scripts/lib/jquery";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_2_1_3_min_js = Url("jquery-2.1.3.min.js");
                public static readonly string jquery_2_1_3_min_map = Url("jquery-2.1.3.min.map");
                public static readonly string jquery_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.d.min.js") ? Url("jquery.d.min.js") : Url("jquery.d.js");
                public static readonly string jquery_metisMenu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.metisMenu.min.js") ? Url("jquery.metisMenu.min.js") : Url("jquery.metisMenu.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class kendo {
                private const string URLPATH = "~/Scripts/lib/kendo";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class css {
                    private const string URLPATH = "~/Scripts/lib/kendo/css";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class Default {
                        private const string URLPATH = "~/Scripts/lib/kendo/css/Default";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string loading_gif = Url("loading.gif");
                        public static readonly string sprite_png = Url("sprite.png");
                    }
                
                    public static readonly string kendo_default_min_css = Url("kendo.default.min.css");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class js {
                    private const string URLPATH = "~/Scripts/lib/kendo/js";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string kendo_all_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/kendo.all.d.min.js") ? Url("kendo.all.d.min.js") : Url("kendo.all.d.js");
                    public static readonly string kendo_all_min_js = Url("kendo.all.min.js");
                }
            
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class linq {
                private const string URLPATH = "~/Scripts/lib/linq";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string linq_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/linq.d.min.js") ? Url("linq.d.min.js") : Url("linq.d.js");
                public static readonly string linq_min_js = Url("linq.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class modernizr {
                private const string URLPATH = "~/Scripts/lib/modernizr";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string modernizr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/modernizr.min.js") ? Url("modernizr.min.js") : Url("modernizr.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class notifications {
                private const string URLPATH = "~/Scripts/lib/notifications";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class css {
                    private const string URLPATH = "~/Scripts/lib/notifications/css";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string angular_growl_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular-growl.min.css") ? Url("angular-growl.min.css") : Url("angular-growl.css");
                    public static readonly string angular_growl_min_css = Url("angular-growl.min.css");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class img {
                    private const string URLPATH = "~/Scripts/lib/notifications/img";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string error_red_png = Url("error-red.png");
                    public static readonly string error_white_png = Url("error-white.png");
                    public static readonly string info_blue_png = Url("info-blue.png");
                    public static readonly string info_white_png = Url("info-white.png");
                    public static readonly string success_green_png = Url("success-green.png");
                    public static readonly string success_white_png = Url("success-white.png");
                    public static readonly string warning_white_png = Url("warning-white.png");
                    public static readonly string warning_yellow_png = Url("warning-yellow.png");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class scripts {
                    private const string URLPATH = "~/Scripts/lib/notifications/scripts";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string angular_growl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular-growl.min.js") ? Url("angular-growl.min.js") : Url("angular-growl.js");
                    public static readonly string angular_growl_min_js = Url("angular-growl.min.js");
                }
            
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class pie_chart_master {
                private const string URLPATH = "~/Scripts/lib/pie-chart-master";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string _gitignore = Url(".gitignore");
                public static readonly string _jshintrc = Url(".jshintrc");
                public static readonly string bower_json = Url("bower.json");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class css {
                    private const string URLPATH = "~/Scripts/lib/pie-chart-master/css";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string kube_min_css = Url("kube.min.css");
                    public static readonly string pie_chart_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pie-chart.min.css") ? Url("pie-chart.min.css") : Url("pie-chart.css");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class dist {
                    private const string URLPATH = "~/Scripts/lib/pie-chart-master/dist";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string pie_chart_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pie-chart.min.js") ? Url("pie-chart.min.js") : Url("pie-chart.js");
                    public static readonly string pie_chart_min_js = Url("pie-chart.min.js");
                    public static readonly string pie_chart_spec_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pie-chart.spec.min.js") ? Url("pie-chart.spec.min.js") : Url("pie-chart.spec.js");
                }
            
                public static readonly string Gruntfile_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Gruntfile.min.js") ? Url("Gruntfile.min.js") : Url("Gruntfile.js");
                public static readonly string karma_conf_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/karma.conf.min.js") ? Url("karma.conf.min.js") : Url("karma.conf.js");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class lib {
                    private const string URLPATH = "~/Scripts/lib/pie-chart-master/lib";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string pie_chart_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pie-chart.min.js") ? Url("pie-chart.min.js") : Url("pie-chart.js");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class utils {
                        private const string URLPATH = "~/Scripts/lib/pie-chart-master/lib/utils";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string draw_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/draw.min.js") ? Url("draw.min.js") : Url("draw.js");
                        public static readonly string legend_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/legend.min.js") ? Url("legend.min.js") : Url("legend.js");
                        public static readonly string misc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/misc.min.js") ? Url("misc.min.js") : Url("misc.js");
                        public static readonly string options_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/options.min.js") ? Url("options.min.js") : Url("options.js");
                        public static readonly string utils_footer = Url("utils.footer");
                        public static readonly string utils_header = Url("utils.header");
                    }
                
                }
            
                public static readonly string LICENCE = Url("LICENCE");
                public static readonly string package_json = Url("package.json");
                public static readonly string README_md = Url("README.md");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class test {
                    private const string URLPATH = "~/Scripts/lib/pie-chart-master/test";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string gauge_mode_spec_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gauge_mode.spec.min.js") ? Url("gauge_mode.spec.min.js") : Url("gauge_mode.spec.js");
                    public static readonly string legend_spec_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/legend.spec.min.js") ? Url("legend.spec.min.js") : Url("legend.spec.js");
                    public static readonly string misc_spec_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/misc.spec.min.js") ? Url("misc.spec.min.js") : Url("misc.spec.js");
                    public static readonly string options_spec_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/options.spec.min.js") ? Url("options.spec.min.js") : Url("options.spec.js");
                    public static readonly string size_spec_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/size.spec.min.js") ? Url("size.spec.min.js") : Url("size.spec.js");
                    public static readonly string spec_footer = Url("spec.footer");
                    public static readonly string spec_header = Url("spec.header");
                    public static readonly string standard_mode_spec_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/standard_mode.spec.min.js") ? Url("standard_mode.spec.min.js") : Url("standard_mode.spec.js");
                }
            
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class signalR {
                private const string URLPATH = "~/Scripts/lib/signalR";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_signalR_2_2_0_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.signalR-2.2.0.min.js") ? Url("jquery.signalR-2.2.0.min.js") : Url("jquery.signalR-2.2.0.js");
                public static readonly string jquery_signalR_2_2_0_min_js = Url("jquery.signalR-2.2.0.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class template_files {
                private const string URLPATH = "~/Scripts/lib/template-files";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bootstrap_social_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-social.min.css") ? Url("bootstrap-social.min.css") : Url("bootstrap-social.css");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class img {
                    private const string URLPATH = "~/Scripts/lib/template-files/img";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string header_profile_png = Url("header-profile.png");
                }
            
                public static readonly string main_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.min.css") ? Url("main.min.css") : Url("main.css");
                public static readonly string style_new_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/style-new.min.css") ? Url("style-new.min.css") : Url("style-new.css");
                public static readonly string style_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/style.min.css") ? Url("style.min.css") : Url("style.css");
            }
        
        }
    
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.css") ? Url("bootstrap.min.css") : Url("bootstrap.css");
        public static readonly string bootstrap_min_css = Url("bootstrap.min.css");
        public static readonly string Site_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Site.min.css") ? Url("Site.min.css") : Url("Site.css");
    }

    
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class Bundles
    {
        public static partial class Scripts 
        {
            public static partial class app 
            {
                public static partial class helpers 
                {
                    public static class Assets
                    {
                    }
                }
                public static class Assets
                {
                }
            }
            public static partial class lib 
            {
                public static partial class angularjs 
                {
                    public static class Assets
                    {
                        public const string angular_facebook_js = "~/Scripts/lib/angularjs/angular-facebook.js"; 
                        public const string angular_ui_router_min_js = "~/Scripts/lib/angularjs/angular-ui-router.min.js"; 
                        public const string angular_min_js = "~/Scripts/lib/angularjs/angular.min.js"; 
                        public const string angularlike_js = "~/Scripts/lib/angularjs/angularlike.js"; 
                        public const string slider_js = "~/Scripts/lib/angularjs/slider.js"; 
                    }
                }
                public static partial class bootstrap 
                {
                    public static partial class css 
                    {
                        public static class Assets
                        {
                            public const string bootstrap_theme_css = "~/Scripts/lib/bootstrap/css/bootstrap-theme.css";
                            public const string bootstrap_theme_min_css = "~/Scripts/lib/bootstrap/css/bootstrap-theme.min.css";
                            public const string bootstrap_css = "~/Scripts/lib/bootstrap/css/bootstrap.css";
                            public const string bootstrap_min_css = "~/Scripts/lib/bootstrap/css/bootstrap.min.css";
                        }
                    }
                    public static partial class fonts 
                    {
                        public static class Assets
                        {
                        }
                    }
                    public static partial class js 
                    {
                        public static class Assets
                        {
                            public const string bootstrap_js = "~/Scripts/lib/bootstrap/js/bootstrap.js"; 
                            public const string bootstrap_min_js = "~/Scripts/lib/bootstrap/js/bootstrap.min.js"; 
                            public const string respond_js = "~/Scripts/lib/bootstrap/js/respond.js"; 
                            public const string respond_min_js = "~/Scripts/lib/bootstrap/js/respond.min.js"; 
                            public const string ui_bootstrap_min_js = "~/Scripts/lib/bootstrap/js/ui-bootstrap.min.js"; 
                        }
                    }
                    public static class Assets
                    {
                    }
                }
                public static partial class font_awesome 
                {
                    public static partial class css 
                    {
                        public static class Assets
                        {
                            public const string font_awesome_css = "~/Scripts/lib/font-awesome/css/font-awesome.css";
                            public const string font_awesome_min_css = "~/Scripts/lib/font-awesome/css/font-awesome.min.css";
                        }
                    }
                    public static partial class fonts 
                    {
                        public static class Assets
                        {
                        }
                    }
                    public static partial class less 
                    {
                        public static class Assets
                        {
                        }
                    }
                    public static partial class scss 
                    {
                        public static class Assets
                        {
                        }
                    }
                    public static class Assets
                    {
                    }
                }
                public static partial class jquery 
                {
                    public static class Assets
                    {
                        public const string jquery_2_1_3_min_js = "~/Scripts/lib/jquery/jquery-2.1.3.min.js"; 
                        public const string jquery_metisMenu_js = "~/Scripts/lib/jquery/jquery.metisMenu.js"; 
                    }
                }
                public static partial class kendo 
                {
                    public static partial class css 
                    {
                        public static partial class Default 
                        {
                            public static class Assets
                            {
                            }
                        }
                        public static class Assets
                        {
                            public const string kendo_default_min_css = "~/Scripts/lib/kendo/css/kendo.default.min.css";
                        }
                    }
                    public static partial class js 
                    {
                        public static class Assets
                        {
                            public const string kendo_all_min_js = "~/Scripts/lib/kendo/js/kendo.all.min.js"; 
                        }
                    }
                    public static class Assets
                    {
                    }
                }
                public static partial class linq 
                {
                    public static class Assets
                    {
                        public const string linq_min_js = "~/Scripts/lib/linq/linq.min.js"; 
                    }
                }
                public static partial class modernizr 
                {
                    public static class Assets
                    {
                        public const string modernizr_js = "~/Scripts/lib/modernizr/modernizr.js"; 
                    }
                }
                public static partial class notifications 
                {
                    public static partial class css 
                    {
                        public static class Assets
                        {
                            public const string angular_growl_css = "~/Scripts/lib/notifications/css/angular-growl.css";
                            public const string angular_growl_min_css = "~/Scripts/lib/notifications/css/angular-growl.min.css";
                        }
                    }
                    public static partial class img 
                    {
                        public static class Assets
                        {
                        }
                    }
                    public static partial class scripts 
                    {
                        public static class Assets
                        {
                            public const string angular_growl_js = "~/Scripts/lib/notifications/scripts/angular-growl.js"; 
                            public const string angular_growl_min_js = "~/Scripts/lib/notifications/scripts/angular-growl.min.js"; 
                        }
                    }
                    public static class Assets
                    {
                    }
                }
                public static partial class pie_chart_master 
                {
                    public static partial class css 
                    {
                        public static class Assets
                        {
                            public const string kube_min_css = "~/Scripts/lib/pie-chart-master/css/kube.min.css";
                            public const string pie_chart_css = "~/Scripts/lib/pie-chart-master/css/pie-chart.css";
                        }
                    }
                    public static partial class dist 
                    {
                        public static class Assets
                        {
                            public const string pie_chart_js = "~/Scripts/lib/pie-chart-master/dist/pie-chart.js"; 
                            public const string pie_chart_min_js = "~/Scripts/lib/pie-chart-master/dist/pie-chart.min.js"; 
                            public const string pie_chart_spec_js = "~/Scripts/lib/pie-chart-master/dist/pie-chart.spec.js"; 
                        }
                    }
                    public static partial class lib 
                    {
                        public static partial class utils 
                        {
                            public static class Assets
                            {
                                public const string draw_js = "~/Scripts/lib/pie-chart-master/lib/utils/draw.js"; 
                                public const string legend_js = "~/Scripts/lib/pie-chart-master/lib/utils/legend.js"; 
                                public const string misc_js = "~/Scripts/lib/pie-chart-master/lib/utils/misc.js"; 
                                public const string options_js = "~/Scripts/lib/pie-chart-master/lib/utils/options.js"; 
                            }
                        }
                        public static class Assets
                        {
                            public const string pie_chart_js = "~/Scripts/lib/pie-chart-master/lib/pie-chart.js"; 
                        }
                    }
                    public static partial class test 
                    {
                        public static class Assets
                        {
                            public const string gauge_mode_spec_js = "~/Scripts/lib/pie-chart-master/test/gauge_mode.spec.js"; 
                            public const string legend_spec_js = "~/Scripts/lib/pie-chart-master/test/legend.spec.js"; 
                            public const string misc_spec_js = "~/Scripts/lib/pie-chart-master/test/misc.spec.js"; 
                            public const string options_spec_js = "~/Scripts/lib/pie-chart-master/test/options.spec.js"; 
                            public const string size_spec_js = "~/Scripts/lib/pie-chart-master/test/size.spec.js"; 
                            public const string standard_mode_spec_js = "~/Scripts/lib/pie-chart-master/test/standard_mode.spec.js"; 
                        }
                    }
                    public static class Assets
                    {
                        public const string Gruntfile_js = "~/Scripts/lib/pie-chart-master/Gruntfile.js"; 
                        public const string karma_conf_js = "~/Scripts/lib/pie-chart-master/karma.conf.js"; 
                    }
                }
                public static partial class signalR 
                {
                    public static class Assets
                    {
                        public const string jquery_signalR_2_2_0_js = "~/Scripts/lib/signalR/jquery.signalR-2.2.0.js"; 
                        public const string jquery_signalR_2_2_0_min_js = "~/Scripts/lib/signalR/jquery.signalR-2.2.0.min.js"; 
                    }
                }
                public static partial class template_files 
                {
                    public static partial class img 
                    {
                        public static class Assets
                        {
                        }
                    }
                    public static class Assets
                    {
                        public const string bootstrap_social_css = "~/Scripts/lib/template-files/bootstrap-social.css";
                        public const string main_css = "~/Scripts/lib/template-files/main.css";
                        public const string style_new_css = "~/Scripts/lib/template-files/style-new.css";
                        public const string style_css = "~/Scripts/lib/template-files/style.css";
                    }
                }
                public static class Assets
                {
                }
            }
            public static class Assets
            {
            }
        }
        public static partial class Content 
        {
            public static class Assets
            {
                public const string bootstrap_css = "~/Content/bootstrap.css";
                public const string bootstrap_min_css = "~/Content/bootstrap.min.css";
                public const string Site_css = "~/Content/Site.css";
            }
        }
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;

    // Calling T4Extension.TimestampString through delegate to allow it to be replaced for unit testing and other purposes
    public static Func<string, string> TimestampString = System.Web.Mvc.T4Extensions.TimestampString;

    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114


